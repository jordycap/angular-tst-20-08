# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build - Test - Lint - Deploy workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
    #1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
    #2. Setup node.js
      - name: Setup node.js
        uses: actions/setup-node@v3
    #3. Install dependencies
      - name: Install dependencies
        run: npm ci
    #4. Build
      - name: Build
        run: npm run build
   
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      #1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      #2. Setup node.js
      - name: Setup node.js
        uses: actions/setup-node@v3
      #3. Install dependencies
      - name: Install dependencies
        run: npm ci
      #4. Lint
      - name: lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      #1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      #2. Setup node.js
      - name: Setup node.js
        uses: actions/setup-node@v3
      #3. Install dependencies
      - name: Install dependencies
        run: npm ci
      #4. Test
      - name: test
        run: npm run test:ci
      # #5. Generate JUnit test results
      # - name: Upload JUnit test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: junit-test-results
      #     path: reports/junit/*.xml

      #6. Publish test results
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() # run even if tests fail
        with:
          name: Test results
          path: reports/junit/*.xml
          reporter: java-junit

  deploy:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    steps:
      - name: deploy
        run: echo "Deploy simulated, Build would be deployed here"